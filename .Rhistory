getwd()
length(summary(fit))
source('Documents/Predict-House-Price/workingScript.R')
# Chunk 1
library(ggplot2)
library(gridExtra)
source('workingScript.R')
p1<-ggplot(data = houseDataClean, aes(x = grade, y = price)) + geom_smooth(method = 'lm');
p2<-ggplot(data = houseDataClean, aes(x = view, y = price)) + geom_smooth(method = 'lm');
p3<-ggplot(data = houseDataClean, aes(x = sqft_above, y = price)) + geom_smooth(method = 'lm');
p4<-ggplot(data = houseDataClean, aes(x = sqft_living, y = price)) + geom_smooth(method = 'lm');
p5<-ggplot(data = houseDataClean, aes(x = sqft_living15, y = price)) + geom_smooth(method = 'lm');
p6<-ggplot(data = houseDataClean, aes(x = sqft_basement, y = price)) + geom_smooth(method = 'lm');
p7<-ggplot(data = houseDataClean, aes(x = howOld, y = price)) + geom_smooth(method = 'lm');
grid.arrange(p1, p2, p3, p4, p5, p6, p7, nrow = 2, ncol = 4)
# Chunk 2
source('workingScript.R')
summary(fit)
# Chunk 1
library(ggplot2)
library(gridExtra)
source('workingScript.R')
p1<-ggplot(data = houseDataClean, aes(x = grade, y = price)) + geom_smooth(method = 'lm');
p2<-ggplot(data = houseDataClean, aes(x = view, y = price)) + geom_smooth(method = 'lm');
p3<-ggplot(data = houseDataClean, aes(x = sqft_above, y = price)) + geom_smooth(method = 'lm');
p4<-ggplot(data = houseDataClean, aes(x = sqft_living, y = price)) + geom_smooth(method = 'lm');
p5<-ggplot(data = houseDataClean, aes(x = sqft_living15, y = price)) + geom_smooth(method = 'lm');
p6<-ggplot(data = houseDataClean, aes(x = sqft_basement, y = price)) + geom_smooth(method = 'lm');
p7<-ggplot(data = houseDataClean, aes(x = howOld, y = price)) + geom_smooth(method = 'lm');
grid.arrange(p1, p2, p3, p4, p5, p6, p7, nrow = 2, ncol = 4)
# Chunk 2
source('workingScript.R')
summary(fit)
# Chunk 1
library(ggplot2)
library(gridExtra)
source('workingScript.R')
p1<-ggplot(data = houseDataClean, aes(x = grade, y = price)) + geom_smooth(method = 'lm');
p2<-ggplot(data = houseDataClean, aes(x = view, y = price)) + geom_smooth(method = 'lm');
p3<-ggplot(data = houseDataClean, aes(x = sqft_above, y = price)) + geom_smooth(method = 'lm');
p4<-ggplot(data = houseDataClean, aes(x = sqft_living, y = price)) + geom_smooth(method = 'lm');
p5<-ggplot(data = houseDataClean, aes(x = sqft_living15, y = price)) + geom_smooth(method = 'lm');
p6<-ggplot(data = houseDataClean, aes(x = sqft_basement, y = price)) + geom_smooth(method = 'lm');
p7<-ggplot(data = houseDataClean, aes(x = howOld, y = price)) + geom_smooth(method = 'lm');
grid.arrange(p1, p2, p3, p4, p5, p6, p7, nrow = 2, ncol = 4)
# Chunk 2
source('workingScript.R')
summary(fit)
getwd()
q
q((()))
ggkj
jll
l;l;
klj
llk
jhlm
fit
setwd('Documents/Predict-House-Price/')
source('workingScript.R')
source('workingScript.R')
summary(fit)
length(summary(fit))
summary(fit)$adj,r
summary(fit)$adj.r
fit
qwewe
wqewe
eqweqw
eqwe
eqweqw
eqwewq
library(caret)
# Read in the data from the CSV
houseData<-read.csv("kc_house_data.csv")
## Introducing new column
houseData$howOld<-0
for(i in 1:nrow(houseData)){
if(houseData[i,]$yr_renovated==0){
houseData[i,]$howOld<-2015-houseData[i,]$yr_built
}
else{
houseData[i,]$howOld<-2015-houseData[i,]$yr_renovated
}
}
# Based on the correlation
# Filter out unnecessary columns
requiredCols<-c('price', 'sqft_living', 'grade', 'sqft_above', 'bathrooms',
'sqft_basement', 'bedrooms', 'floors', 'waterfront', 'howOld',
'view', 'sqft_living15', 'zipcode', 'yr_renovated')
houseDataClean<-houseData[,requiredCols]
# Some column types doesn't make sense
# For example: Year is not numeric, it must be categorical or factor
# So, change the corresponding column types
houseDataClean$bathrooms<-as.factor(houseDataClean$bathrooms)
houseDataClean$bedrooms<-as.factor(houseDataClean$bedrooms)
houseDataClean$floors<-as.factor(houseDataClean$floors)
houseDataClean$yr_renovated<-as.numeric(houseDataClean$yr_renovated)
houseDataClean$zipcode<-as.factor(houseDataClean$zipcode)
houseDataClean$waterfront<-as.factor(houseDataClean$waterfront)
houseDataClean$view<-as.numeric(houseDataClean$view)
houseDataClean$grade<-as.numeric(houseDataClean$grade)
houseDataClean$sqft_living<-as.numeric(houseDataClean$sqft_living)
houseDataClean$sqft_above<-as.numeric(houseDataClean$sqft_above)
houseDataClean$sqft_basement<-as.numeric(houseDataClean$sqft_basement)
houseDataClean$sqft_living15<-as.numeric(houseDataClean$sqft_living15)
# Removing 7, 8, 9, 10, 11 and 33 bedrooms since their individual
# count is less than 40 obs
index<-houseDataClean$bedrooms %in% c(0,7,8,9,10,11,33)
houseDataClean<-houseDataClean[!index,]
# Done with the data cleaning
# Now divide them for training and testing
# Set the random generator seed for reproducibility
set.seed(192)
# Slicing them in 80-20%
slice<-createDataPartition(houseDataClean$price, p=0.8, list = FALSE)
train<-houseDataClean[slice,]
test<-houseDataClean[-slice,]
# Fit the linear model
fit<-lm(price~., train)
# Predict testing data on our linear model
pred<-predict(fit, newdata =test)
# Compare the solutions and predictions
sol<-test$price
diff<-sol-pred
diff
length(diff)
length(test$price)
summary(diff)
source('workingScript.R')
summary(diff)
summary(diff)$Median
summary(diff)$median
summary(diff)[3]
summary(diff)[3][1]
summary(diff)[[3]]
# Chunk 1
library(ggplot2)
library(gridExtra)
source('workingScript.R')
